dim(one)
length(one)
one
?count
??count
m <- z$VAL
m <- na.rm(m)
mm <- complete.cases(m)
m <- m[mm,]
mm
m <- m[mm,]
length(m)
length(mm)
m[mm,]
m[mm]
z <- m
z <- m[m>23]
z
zz <- complete.cases(z)
z <- z[zz]
z
count(z)
length(z)
u <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(u, destfile="ngap.xlsx")
ngap <- read.xlsx("ngap.xlsx")
install.packages("xlsx")
ngap <- read.xlsx("ngap.xlsx")
ngap <- read.xlsx("ngap.xlsx")
library(xlsx)
install.packages("rJava")
library(rJava)
library(xlsx)
library(rJava)
install.packages(rJava)
install.packages("rJava")
library(rJava)
u <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file(u, destfile="xmlll.xml")
u
z <- xmlTreeParse("xmlll.xml")
z
z <- xmlRoot(z)
z
names(rootNode)
names(z)
names(z)
z[1]
names[[1]]
z[[q]]
z[[1]]
z[[[1]]]
z[[[1]]]
xpathSApply(z, "//zipcode", xmlValue)
xpathSApply(z,"//zipcode", xmlValue)
xmlSApply(z, xmlValue)
xmlSApply(z$zipcode, xmlValue)
xpathSApply(z,"//zipcode", xmlValue)
z
xpathSApply(z, "/response/row/row/zipcode", xmlValue)
xpathSApply(z, "//response/row/row/zipcode", xmlValue)
y <- xmltoDataFrame(z)
library(XML)
u
z <- xmltoDataFrame(u)
z <- xmlToDataFrame(u)
z
q <- xmlToDataFrame(z)
z
z <- z/row
z <- //zipcode
xpathApply(z, "//zipcode", xmlValue)
u <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(u, destfile = "acs.csv")
acs <- read.csv("acs.csv")
View(acs)
DT <- acs
View(DT)
DT[,mean(pwgtp15),by=SEX]
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(DT[,mean(pwgtp15),by=SEX])
DT[,mean(pwgtp15)]
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
mean(DT$pwgtp15,by=DT$SEX)
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
zzz
"zzz"
clear
clc
q
clc()
clear()
cls()
ugh
'ugh'
"YELLOW"
'yellow'
'potato'
'tomato'
library(datasets)
data(cars)
with(cars, plot(speed,dist))
View(cars)
x
y
install.packages("lattice")
library(lattice)
"yellow"
"potato"
""""""""""""""""""""
coplotsssssssss
hggggggghghghhhhh
huuuuuhaaaahuwaaaa
huwaahahaha
hwahahaha
hwahahaha
hwahahahaa
hwahahahaha
hwa
ahaha
hahaha
zzzz
...
"..."
zzzzzz
"zzzzzzzzzzzzz"
"========="
"=================================="
zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
state <- data.frame(state.x77, region = state.region)
View(state)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
levels(state$region)
factors(state$region)
factor(state$region)
clear
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
library(ggplot2)
data(mpg)
View(mpg)
qplot(displ, hwy, data=mpg)
100*50
5000*44
8000*50*44
unitp = 50*9*44
x = 10000
unitp*x
unitp*x/1000000
clear
'clear'
198/44
clear
198000000/10000000
198/1
10000/198
1/50.50505
clear
1000000
x = 1000000*0.05
x
x*50*44
y = x*50*44/1000000
y
110/44
clear
3*4
install.packages("graphics", "grDevices")
install.packages("graphics", "grDevices")
install.packages("graphics", "grDevices")
install.packages("graphics", "grDevices")
install.packages("graphics", "grDevices")
install.packages("graphics", "grDevices")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
library(graphics)
install.packages("grDevices")
install.packages("grDevices")
library(grDevices)
library(lattice)
library(grid)
?plot
?par
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
plot(airquality$Wind, airquality$Ozone)
airquality <- transform( airquality, Month=factor(Month))
boxplot(Ozone~Month, airquality, xlab="Month", ylab = "Ozone (ppb)")
par("lty")
par("col")
clear
x = 12 + 9 + 5 + 9 + 11
y = 20 + 34 + 13 + 28 + 11
z = x + y/60
z
x2 = 6 + 16 + 5 + 7
y2 = 56 + 56 + 34 + 31
z2 = x2 + y2/60
z2
z + z2
12.2+z2
text
lines
plot
title
library(datasets)
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in NY")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in NY"))
with(subset(airquality, Month==5), points(Wind, Ozone, col = "blue"))
legend("topright", pch = 1, col = c("blue, black", legend = c("May", "Other")))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in NYC", pch = 20))
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 2)
par(mfrow = c(1,2))
with(airquality, {)
with(airquality, {plot(Wind, Ozone) plot(Solar.R, Ozone)})
example(points)
par(mfar = c(1,1))
?par
x <- rnorm(100)
y <-
y <- rnorm(100)
x <- rnorm(100)
plot(x, y, xlab="weight", ylab="height", pch = 20)
legend("topright", "data", pch = 20)
fit <- lm(y~x)
abline(fit, lwd = 5)
abline(fit, lwd = 5, col = wheat)
abline(fit, lwd = 5, col = "wheat")
par(mfrow = c(1,1))
par(mfrow = c(1,1))
par(mfcol = c(1,1))
par(mf =  c(1,1))
plot(x,y)
?gl
plot(x)
g <- gl(2, 50, "male", "female")
g
g
g = gl(2,50,"male", "female")
g
g
g <- gl(2, 50, "male", "female")
library(datasets)
library(lattice)
airquality( <- transform(airquality, Month = factor(Month))
airquality( <- transform(airquality, Month = factor(Month)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, airquality, layout = c(5,1))
library(datasets)
xyplot(Ozone ~ Wind | Month, airquality, layout = c(5,1))
"lovette"
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100,sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y~x | f, layout = c(2,1))
"LOVETTE"
"ZZZZZ"
"QQQQ"
"Q"
"QQ"
"QQQ"
install.packages("ggplot2")
library(ggplot2)
2:46
46+30
+60
60-46
14+30+60
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
trellis.par.set()
?trellis.par.set
g <- ggplot(movies, aes(votes, rating))
print(G)
print(G)
print(g)
qplot(votes, rating, data=movies)
qplot(votes, rating, data=movies, panel = panel.loess)
qplot(votes, rating, data=movies + stats_smooth("loess"))
library(ggplot2)
qplot(votes, rating, data=movies + stats_smooth("loess"))
qplot(votes, rating, data=movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth())
qplot(votes, rating, data = movies) + geom_smooth()
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = .~Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = .~ factor(Month))
20+20+35
20+20+25
str(mpg)
...
'----'
'-------'
'----------'
'-----------------------------'
"--------"
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv
)
qplot(displ, hwy, data = mpg, geom="point")
qplot(displ, hwy, data = mpg, geom="smooth")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth")
)
qplot(hwy, data = mpg, fill = drv)
qplot(hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(displ, hwy, data = mpg, facets = drv~.)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
qplot(hwy, data = mpg, facets = drv~.)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
qplot(hwy, data = mpg, facets = drv~.)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
str(maacs)
?log
14+6+13
g <- ggplot(airquality, aes(Ozone, Temp))
g + geom_point(aes(color = Month))
g + geom_point(aes(color = Month), size = 4, alpha = 1/2)
g + geom_point(aes(color = Month), size = 4, alpha = 1/2) + labs(x="HELLO", y="HEY", title="BWAHAHAHAHAHA")
testdat <- data.frame(x=1:100, y=rnorm(100))
testdat[50,2] <- 100
plot(testdat$x, testdat$y, type="1", ylim = c(-3,3))
plot(testdat$x, testdat$y, type="l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x=x,y=y))
g+geom_line()
g+geom_line() + ylim(-3,3)
g+geom_line() + coord_cartesian(ylim=c(-3,3))
cutpoints <- quantile(airquality$Temp, seq(0,1,length=4), na.rm=TRUE)
cutpoints
airquality$Temp <- cut(airquality$Temp, cutpoints)
levels(airquality$Temp)
a <- [1; 3; 5]
library(UsingR)
install.packages("Using.R")
week <- weekdays(as.Date(actComplete$date))
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
```{r preprocessing}
setwd("C:/Users/Lovette Regner/Documents/GitHub/RepData_PeerAssessment1")
act <- read.csv("activity.csv")
```
## What is mean total number of steps taken per day?
```{r summary}
stepsDaily <- tapply(act$steps, act$date, sum)
histogram(stepsDaily, breaks = 15, xlab = "Total Steps Daily")
mean <- mean(stepsDaily, na.rm = TRUE)
median <- median(stepsDaily, na.rm = TRUE)
```
The mean is `r mean`, and the median is `r median`.
## What is the average daily activity pattern?
```{r ts}
stepsPerInterval <- tapply(act$steps, act$interval, mean, na.rm = TRUE)
interval <- rownames(stepsPerInterval)
dailyAct <- cbind(interval, stepsPerInterval)
plot(stepsPerInterval, type = "l")
maxInt <- dailyAct[dailyAct[,2] == max(stepsPerInterval),1]
```
The interval that contains the most number of steps is interval `r maxInt`.
## Inputing missing values
```{r missing}
totalNA <- sum(is.na(act$steps))
actComplete <- act
for (i in 1:nrow(act))
{
if (is.na(act$steps[i]))
{
actComplete[i,1] <- dailyAct[dailyAct[,1] == act$interval[i],2]
}
}
newStepsDaily <- tapply(as.numeric(actComplete$steps), actComplete$date, sum)
histogram(newStepsDaily, breaks = 15, xlab = "Total Steps Daily (Complete Values)")
newMean <- mean(newStepsDaily, na.rm = TRUE)
newMedian <- median(newStepsDaily, na.rm = TRUE)
```
The new mean is `r newMean`, and the new median is `r newMedian`. Both values remained the same after using the average steps per interval to fill up the missing step values.
## Are there differences in activity patterns between weekdays and weekends?
```{r week}
week <- weekdays(as.Date(actComplete$date))
```
week <- weekdays(as.Date(actComplete$date))
head(week)
week["Saturday" | "Sunday"] <- "Weekend"
week[Saturday]
week["Saturday"]
week["Monday"]
weekend <- week["Saturday" | "Sunday"]
week <- weekdays(as.Date(actComplete$date))
head(week)
week <- weekdays(as.Date(actComplete$date))
week
week[week == "Sunday"]
z <- week[week == "Sunday"]
head(z)
z
week
week["Monday"] = "Weekday"
head(week)
week["Monday"] <- "Weekday"
week["Monday"]
head(week)
week <- weekdays(as.Date(actComplete$date))
week
norw(actComplete)
nrow(actComplete)
for (i in 1:nrow(actComplete))
{
if(week[i] == "Saturday" | week[i] == "Sunday")
{
week[i] <- "Weekend"
}
else
{
week[i] <- "Weekday"
}
}
week
head(week)
actWeek <- cbind(actComplete, week)
weekday <- actWeek[actWeek$week == "Weekday",]
weekend <- actWeek[actWeek$week == "Weekend",]
View(weekday)
weekdayInterval <- tapply(weekday$steps, weekday$interval, mean, na.rm = TRUE)
weekendInt <- cbind(interval, weekdayInterval)
plot(weekdayInterval, type = "l")
weekdayInterval <- tapply(weekday$steps, weekday$interval, mean, na.rm = TRUE)
View(weekday)
weekdayInterval <- tapply(as.numeric(weekday$steps), weekday$interval, mean, na.rm = TRUE)
weekendInt <- cbind(interval, weekdayInterval)
plot(weekdayInterval, type = "l")
plot(weekdayInterval, type = "l", ylab = "Average Steps", xlab = "Interval", main = "Time Series of Average Weekday Steps")
weekendInterval <- tapply(as.numeric(weekend$steps), weekend$interval, mean, na.rm = TRUE)
plot(weekendInterval, type = "l", ylab = "Average Steps", xlab = "Interval", main = "Time Series of Average Weekend Steps")
ggplot(weekdayInterval)
library(ggplot2)
ggplot2(weekdayInterval)
ggplot(weekdayInterval)
?ggplot
ggplot(weekday)
ggplot(weekday) + geom_line
ggplot(weekday) + geom_line()
?geom
?geom_line?
?geom
?ggplot
xyplot(interval, weekendInterval)
?xyplot
library(lattice)
xyplot(interval, weekendInterval)
?xyplot
weekendInterval[1,1]
weekendInterval[1]
weekendInterval[2]
weekendInterval[[2]]
as.numeric(weekendInterval[2])
xyplot(as.numeric(weekday$steps)~interval, type = "l")
xyplot(as.numeric(weekday$steps)~interval)
xyplot(as.numeric(weekdayInterval)~interval)
weekdayInterval
as.numeric(weekdayInterval)
plot(as.numeric(weekdayInterval), type = "l", ylab = "Average Steps", xlab = "Interval", main = "Time Series of Average Weekday Steps"))
plot(as.numeric(weekdayInterval), type = "l", ylab = "Average Steps", xlab = "Interval", main = "Time Series of Average Weekday Steps")
?xyplot
xyplot(as.numeric(weekdayInterval))
xyplot(as.numeric(weekdayInterval))
weekendInterval <- tapply(as.numeric(weekend$steps), weekend$interval, mean, na.rm = TRUE)
plot(weekendInterval, type = "l", ylab = "Average Steps", xlab = "Interval", main = "Time Series of Average Weekend Steps")
par(mfcol = c(2,1))
weekdayInterval <- tapply(as.numeric(weekday$steps), weekday$interval, mean, na.rm = TRUE)
plot(as.numeric(weekdayInterval), type = "l", ylab = "Average Steps", xlab = "Interval", main = "Time Series of Average Weekday Steps"))
weekendInterval <- tapply(as.numeric(weekend$steps), weekend$interval, mean, na.rm = TRUE)
plot(weekendInterval, type = "l", ylab = "Average Steps", xlab = "Interval", main = "Time Series of Average Weekend Steps")
par(mfcol = c(2,1))
weekdayInterval <- tapply(as.numeric(weekday$steps), weekday$interval, mean, na.rm = TRUE)
plot(as.numeric(weekdayInterval), type = "l", ylab = "Average Steps", xlab = "Interval", main = "Time Series of Average Weekday Steps")
weekendInterval <- tapply(as.numeric(weekend$steps), weekend$interval, mean, na.rm = TRUE)
plot(weekendInterval, type = "l", ylab = "Average Steps", xlab = "Interval", main = "Time Series of Average Weekend Steps")
stepsPerInterval <- tapply(act$steps, act$interval, mean, na.rm = TRUE)
interval <- rownames(stepsPerInterval)
dailyAct <- cbind(interval, stepsPerInterval)
plot(stepsPerInterval, type = "l")
par(mfrow = c(1,1))
stepsPerInterval <- tapply(act$steps, act$interval, mean, na.rm = TRUE)
interval <- rownames(stepsPerInterval)
dailyAct <- cbind(interval, stepsPerInterval)
plot(stepsPerInterval, type = "l")
stepsPerInterval <- tapply(act$steps, act$interval, mean, na.rm = TRUE)
interval <- rownames(stepsPerInterval)
dailyAct <- cbind(interval, stepsPerInterval)
plot(stepsPerInterval, type = "l", ylab = "Ave Steps", xlab = "Interval")
